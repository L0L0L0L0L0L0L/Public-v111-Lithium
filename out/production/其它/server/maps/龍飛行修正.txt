recvops 包頭

搜索：

# 龍龍移動
MOVE_DRAGON = 0x133


替換：

# 龍龍移動
MOVE_DRAGON = 0x133

# 龍飛行
DRAGON_FLY = 0x134


sendops 包頭


搜索：

# 顯示PVP HP
PVP_HP = 0x138

替換：

# 顯示PVP HP
PVP_HP = 0x138

# 龍飛行
SHOW_DRAGON_FLY= 0x138


源碼部分


搜索：

    MAPLETV,
    MOVE_DRAGON,


替換：

    MAPLETV,
    MOVE_DRAGON,
    DRAGON_FLY,


搜索：

            case MOVE_DRAGON:
                SummonHandler.MoveDragon(slea, c.getPlayer());
                break;


替換：

            case MOVE_DRAGON:
                SummonHandler.MoveDragon(slea, c.getPlayer());
                break;
            case DRAGON_FLY:
                SummonHandler.DragonFly(slea, c.getPlayer());
                break;




搜索：

    public static final void MoveDragon(final LittleEndianAccessor slea, final MapleCharacter chr) {
        slea.skip(8); //POS
        final List<LifeMovementFragment> res = MovementParse.parseMovement(slea, 5);
        if (chr != null && chr.getDragon() != null && res.size() > 0) {
            final Point pos = chr.getDragon().getPosition();
            MovementParse.updatePosition(res, chr.getDragon(), 0);
            if (!chr.isHidden()) {
                chr.getMap().broadcastMessage(chr, EtcPacket.moveDragon(chr.getDragon(), pos, res), chr.getTruePosition());
            }

            WeakReference<MapleCharacter>[] clones = chr.getClones();
            for (int i = 0; i < clones.length; i++) {
                if (clones[i].get() != null) {
                    final MapleMap map = chr.getMap();
                    final MapleCharacter clone = clones[i].get();
                    CloneTimer.getInstance().schedule(new Runnable() {

                        public void run() {
                            try {
                                if (clone.getMap() == map && clone.getDragon() != null) {
                                    final Point startPos = clone.getDragon().getPosition();
                                    MovementParse.updatePosition(res, clone.getDragon(), 0);
                                    if (!clone.isHidden()) {
                                        map.broadcastMessage(clone, EtcPacket.moveDragon(clone.getDragon(), startPos, res), clone.getTruePosition());
                                    }

                                }
                            } catch (Exception e) {
                                //very rarely swallowed
                            }
                        }
                    }, 500 * i + 500);
                }
            }
        }
       
    }


下麵添加：

    public static void DragonFly(LittleEndianAccessor slea, MapleCharacter chr) {
        if (chr == null || chr.getMap() == null || chr.getDragon() == null) {
            return;
        }
        /*
         * 1902040 - 第1階段龍 - (無描述)
         * 1902041 - 第2階段龍 - (無描述)
         * 1902042 - 第3階段龍 - (無描述)
         * 1912033 - 第1階段龍鞍 - (無描述)
         * 1912034 - 第2階段龍鞍 - (無描述)
         * 1912035 - 第3階段龍鞍 - (無描述)
         */
        int type = slea.readInt();
        int mountId = type == 0 ? slea.readInt() : 0;
        chr.getMap().broadcastMessage(chr, EtcPacket.showDragonFly(chr.getId(), type, mountId), chr.getTruePosition());
    }



搜索：

    public static byte[] moveDragon(MapleDragon d, Point startPos, List<LifeMovementFragment> moves) {
        final MaplePacketLittleEndianWriter mplew = new MaplePacketLittleEndianWriter();

        mplew.writeShort(SendPacketOpcode.DRAGON_MOVE.getValue());
        mplew.writeInt(d.getOwner());
        mplew.writePos(startPos);
        mplew.writeInt(0);
        PacketHelper.serializeMovementList(mplew, moves);

        return mplew.getPacket();
    }


下麵添加：

    /*
     * 顯示龍飛行效果
     */
    public static byte[] showDragonFly(int chrId, int type, int mountId) {
        MaplePacketLittleEndianWriter mplew = new MaplePacketLittleEndianWriter();

        mplew.writeShort(SendPacketOpcode.SHOW_DRAGON_FLY.getValue());
        mplew.writeInt(chrId);
        mplew.writeInt(type);
        if (type == 0) {
            mplew.writeInt(mountId);
        }

        return mplew.getPacket();
    }




搜索：

    SERVER_BLOCKED,
    DRAGON_MOVE,


替換：

    SERVER_BLOCKED,
    DRAGON_MOVE,
    SHOW_DRAGON_FLY,


搜索：

            case 30010183:
            case 30010184:
            case 30010186:
                return 30010110;
            case 20010022:
                return 80001000;
        }
        return id;
    }


替換：

            case 30010183:
            case 30010184:
            case 30010186:
                return 30010110;
            case 20010022:
                return 80001000;
        }
        return id;
    }

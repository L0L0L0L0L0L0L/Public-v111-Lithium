搜索替換：

    public static final boolean UseTeleRock(LittleEndianAccessor slea, MapleClient c, int itemId) {
        boolean used = false;
        if (itemId == 5041001 || itemId == 5040004) {
            slea.readByte(); //useless
        }
        if (slea.readByte() == 0) { // Rocktype
            final MapleMap target = c.getChannelServer().getMapFactory().getMap(slea.readInt());
            //if ((itemId == 5041000 && c.getPlayer().isRockMap(target.getId())) || (itemId != 5041000 && c.getPlayer().isRegRockMap(target.getId())) || ((itemId == 5040004 || itemId == 5041001) && (c.getPlayer().isHyperRockMap(target.getId()) || GameConstants.isHyperTeleMap(target.getId())))) {
            if (!FieldLimitType.VipRock.check(c.getPlayer().getMap().getFieldLimit()) && !FieldLimitType.VipRock.check(target.getFieldLimit()) && !c.getPlayer().isInBlockedMap()) { //Makes sure this map doesn't have a forced return map
                c.getPlayer().changeMap(target, target.getPortal(0));
                used = true;
            } else {
                c.getPlayer().dropMessage(1, "由於天氣的阻礙，無法移動到該區域。");
            }
        } else {
            final MapleCharacter victim = c.getChannelServer().getPlayerStorage().getCharacterByName(slea.readMapleAsciiString());
            if (victim != null && !victim.isIntern() && c.getPlayer().getEventInstance() == null && victim.getEventInstance() == null) {
                if (!FieldLimitType.VipRock.check(c.getPlayer().getMap().getFieldLimit()) && !FieldLimitType.VipRock.check(c.getChannelServer().getMapFactory().getMap(victim.getMapId()).getFieldLimit()) && !victim.isInBlockedMap() && !c.getPlayer().isInBlockedMap()) {
                    if (itemId == 5041000 || itemId == 5040004 || itemId == 5041001 || (victim.getMapId() / 100000000) == (c.getPlayer().getMapId() / 100000000)) { // Viprock or same continent
                        c.getPlayer().changeMap(victim.getMap(), victim.getMap().findClosestPortal(victim.getTruePosition()));
                        used = true;
                    } else {
                        c.getPlayer().dropMessage(1, "無法跨越大陸移動");
                    }
                } else {
                    c.getPlayer().dropMessage(1, "由於地氣的阻礙，無法移動到角色地圖");
                }
            } else {
                c.getPlayer().dropMessage(1, "現在找不到玩家的位置\r\n不能作瞬間移動");
            }
        }
        return used;// && itemId != 5041001 && itemId != 5040004;
    }

    public static final boolean UseHyperTeleRock(LittleEndianAccessor slea, MapleClient c, int itemId) {
        boolean used = false;
        long temptime = System.currentTimeMillis();
        long exploit = c.getPlayer().getLongNoRecord(GameConstants.TELETIME);
        if (itemId == 5041001 || itemId == 5040004) {
            slea.readByte(); //useless
        }
        if (exploit - temptime >= 0&&c.getPlayer().getGMLevel()==0){
            c.getPlayer().dropMessage(1, ((exploit - System.currentTimeMillis()) / 60000) + "分鐘後可以再次使用。");
        }else{
            if (slea.readByte() == 0) { // Rocktype
                final MapleMap target = c.getChannelServer().getMapFactory().getMap(slea.readInt());
                //if ((itemId == 5041000 && c.getPlayer().isRockMap(target.getId())) || (itemId != 5041000 && c.getPlayer().isRegRockMap(target.getId())) || ((itemId == 5040004 || itemId == 5041001) && (c.getPlayer().isHyperRockMap(target.getId()) || GameConstants.isHyperTeleMap(target.getId())))) {
                if (!FieldLimitType.VipRock.check(c.getPlayer().getMap().getFieldLimit()) && !FieldLimitType.VipRock.check(target.getFieldLimit()) && !c.getPlayer().isInBlockedMap()) { //Makes sure this map doesn't have a forced return map
                    c.getPlayer().changeMap(target, target.getPortal(0));
                    used = false;
                    c.getPlayer().getQuestNAdd(MapleQuest.getInstance(GameConstants.TELETIME)).setCustomData(String.valueOf(System.currentTimeMillis() + (15 * 60 * 1000)));
                } else {
                    c.getPlayer().dropMessage(1, "由於天氣的阻礙，無法移動到該區域。");
                }
            } else {
                final MapleCharacter victim = c.getChannelServer().getPlayerStorage().getCharacterByName(slea.readMapleAsciiString());
                if (victim != null && !victim.isIntern() && c.getPlayer().getEventInstance() == null && victim.getEventInstance() == null) {
                    if (!FieldLimitType.VipRock.check(c.getPlayer().getMap().getFieldLimit()) && !FieldLimitType.VipRock.check(c.getChannelServer().getMapFactory().getMap(victim.getMapId()).getFieldLimit()) && !victim.isInBlockedMap() && !c.getPlayer().isInBlockedMap()) {
                        if (itemId == 5041000 || itemId == 5040004 || itemId == 5041001 || (victim.getMapId() / 100000000) == (c.getPlayer().getMapId() / 100000000)) { // Viprock or same continent
                            c.getPlayer().changeMap(victim.getMap(), victim.getMap().findClosestPortal(victim.getTruePosition()));
                            c.getPlayer().getQuestNAdd(MapleQuest.getInstance(GameConstants.TELETIME)).setCustomData(String.valueOf(System.currentTimeMillis() + (15 * 60 * 1000)));
                            used = false;
                        }
                    } else {
                        c.getPlayer().dropMessage(1, "由於地氣的阻礙，無法移動到角色地圖");
                    }
                } else {
                    c.getPlayer().dropMessage(1, "現在找不到玩家的位置\r\n不能作瞬間移動");
                }
            }
        }
        return used;// && itemId != 5041001 && itemId != 5040004;
    }